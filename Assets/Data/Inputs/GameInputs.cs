//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Data/Inputs/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""InteractionMode"",
            ""id"": ""34f3e68e-4ee2-4b32-8394-650dc594ccab"",
            ""actions"": [
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""f2d6ef5b-dafa-4100-9757-c5798433fc0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenFacilityBuildingMode"",
                    ""type"": ""Button"",
                    ""id"": ""c0f5105e-98a5-489e-be01-bb4a85945acc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2735d5c-82c0-4dc3-a639-6d2ede72cfcf"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbbf0f01-36c5-4678-a70f-ba1deac3c660"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fecaf1b1-30ca-41c9-b93f-a31209e236d7"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenFacilityBuildingMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MapFilter"",
            ""id"": ""f4795cab-eb07-42c1-b02d-1c77a3b30325"",
            ""actions"": [
                {
                    ""name"": ""TerrainVue"",
                    ""type"": ""Button"",
                    ""id"": ""78b617c8-689e-4ff8-b4e3-c27825ace508"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MarketVue"",
                    ""type"": ""Button"",
                    ""id"": ""2ffa9330-a937-44e3-aea5-c5815db1a535"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5cf20930-1f28-4f4f-8294-2828861250cd"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TerrainVue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""606fdd1d-8fcb-4a1f-ae1f-47d9c1286743"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MarketVue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraControles"",
            ""id"": ""f05ef245-4561-4cfd-8ac2-834680e513f8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fbed287d-5580-4faf-892e-487301f7124b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zooming"",
                    ""type"": ""Value"",
                    ""id"": ""4f0cd8a5-fa2d-45c1-b95a-1e0f3e7a3c2d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpeepUp"",
                    ""type"": ""Button"",
                    ""id"": ""649efa9d-9e47-4774-a17c-07e05ba61096"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Axis"",
                    ""id"": ""61a6e0e5-f4a2-4371-819f-d9669a91c86a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6f11af52-03c3-4cf7-9cfe-21260dd846d9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b06854fd-a8e6-463d-a434-57221218444e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6571ab1c-3027-490a-8769-e301ae72fdba"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ad0fef1e-1b75-4680-8ed5-abe13fdba131"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f888b744-2740-4986-aa0e-0ce2c8423b5d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zooming"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""627a5c79-3322-44ae-87be-9d0e35b9a8b6"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zooming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""948834e8-274e-43da-8038-794902265e13"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zooming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""86ffa792-a813-41d8-a627-d8e56fb2c25c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeepUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TimeControles"",
            ""id"": ""2fd53f24-eb20-4682-9cc1-9590150fd09a"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""9acaf949-492d-4a0e-9e31-a213fe26f1fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Time1"",
                    ""type"": ""Button"",
                    ""id"": ""7adc3ea8-e1df-43c9-a09e-a02ea1593ec8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Time2"",
                    ""type"": ""Button"",
                    ""id"": ""ae0565a9-97d1-42ef-b8ee-277d5ec33880"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Time3"",
                    ""type"": ""Button"",
                    ""id"": ""4797c12c-cc6d-4f50-bb8c-2d6bbcdd87d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IncreaseTime"",
                    ""type"": ""Button"",
                    ""id"": ""eb59068a-1637-4da2-8cda-bb39a22057b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84d99e63-8cd8-4a54-9084-e5a091aeebe8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b09ffa00-e24a-494a-8ff1-dd7f256e67eb"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Time1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""491b76ca-4858-4a4f-a716-1fee4db5d572"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Time2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c6b8203-fb4d-4a7e-b3b7-3160b3cdce4f"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Time3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""NumPad"",
                    ""id"": ""0e6ff551-4ffd-4e6c-8f38-63e263cd59c3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseTime"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""39a77362-f343-4f70-90f9-a1f336650e73"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2f2182ae-cc35-4ceb-99e6-3866bab3b30e"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ef4d3f8c-b647-4a51-a200-ddc099b1d1a4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseTime"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""28f930c5-7a50-4b0f-9cb1-30d4ddc07663"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""657bf13b-ce32-49a0-a556-0a35134c53f0"",
                    ""path"": ""<Keyboard>/semicolon"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InteractionMode
        m_InteractionMode = asset.FindActionMap("InteractionMode", throwIfNotFound: true);
        m_InteractionMode_Return = m_InteractionMode.FindAction("Return", throwIfNotFound: true);
        m_InteractionMode_OpenFacilityBuildingMode = m_InteractionMode.FindAction("OpenFacilityBuildingMode", throwIfNotFound: true);
        // MapFilter
        m_MapFilter = asset.FindActionMap("MapFilter", throwIfNotFound: true);
        m_MapFilter_TerrainVue = m_MapFilter.FindAction("TerrainVue", throwIfNotFound: true);
        m_MapFilter_MarketVue = m_MapFilter.FindAction("MarketVue", throwIfNotFound: true);
        // CameraControles
        m_CameraControles = asset.FindActionMap("CameraControles", throwIfNotFound: true);
        m_CameraControles_Move = m_CameraControles.FindAction("Move", throwIfNotFound: true);
        m_CameraControles_Zooming = m_CameraControles.FindAction("Zooming", throwIfNotFound: true);
        m_CameraControles_SpeepUp = m_CameraControles.FindAction("SpeepUp", throwIfNotFound: true);
        // TimeControles
        m_TimeControles = asset.FindActionMap("TimeControles", throwIfNotFound: true);
        m_TimeControles_Pause = m_TimeControles.FindAction("Pause", throwIfNotFound: true);
        m_TimeControles_Time1 = m_TimeControles.FindAction("Time1", throwIfNotFound: true);
        m_TimeControles_Time2 = m_TimeControles.FindAction("Time2", throwIfNotFound: true);
        m_TimeControles_Time3 = m_TimeControles.FindAction("Time3", throwIfNotFound: true);
        m_TimeControles_IncreaseTime = m_TimeControles.FindAction("IncreaseTime", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InteractionMode
    private readonly InputActionMap m_InteractionMode;
    private List<IInteractionModeActions> m_InteractionModeActionsCallbackInterfaces = new List<IInteractionModeActions>();
    private readonly InputAction m_InteractionMode_Return;
    private readonly InputAction m_InteractionMode_OpenFacilityBuildingMode;
    public struct InteractionModeActions
    {
        private @GameInputs m_Wrapper;
        public InteractionModeActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Return => m_Wrapper.m_InteractionMode_Return;
        public InputAction @OpenFacilityBuildingMode => m_Wrapper.m_InteractionMode_OpenFacilityBuildingMode;
        public InputActionMap Get() { return m_Wrapper.m_InteractionMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionModeActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionModeActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionModeActionsCallbackInterfaces.Add(instance);
            @Return.started += instance.OnReturn;
            @Return.performed += instance.OnReturn;
            @Return.canceled += instance.OnReturn;
            @OpenFacilityBuildingMode.started += instance.OnOpenFacilityBuildingMode;
            @OpenFacilityBuildingMode.performed += instance.OnOpenFacilityBuildingMode;
            @OpenFacilityBuildingMode.canceled += instance.OnOpenFacilityBuildingMode;
        }

        private void UnregisterCallbacks(IInteractionModeActions instance)
        {
            @Return.started -= instance.OnReturn;
            @Return.performed -= instance.OnReturn;
            @Return.canceled -= instance.OnReturn;
            @OpenFacilityBuildingMode.started -= instance.OnOpenFacilityBuildingMode;
            @OpenFacilityBuildingMode.performed -= instance.OnOpenFacilityBuildingMode;
            @OpenFacilityBuildingMode.canceled -= instance.OnOpenFacilityBuildingMode;
        }

        public void RemoveCallbacks(IInteractionModeActions instance)
        {
            if (m_Wrapper.m_InteractionModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionModeActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionModeActions @InteractionMode => new InteractionModeActions(this);

    // MapFilter
    private readonly InputActionMap m_MapFilter;
    private List<IMapFilterActions> m_MapFilterActionsCallbackInterfaces = new List<IMapFilterActions>();
    private readonly InputAction m_MapFilter_TerrainVue;
    private readonly InputAction m_MapFilter_MarketVue;
    public struct MapFilterActions
    {
        private @GameInputs m_Wrapper;
        public MapFilterActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @TerrainVue => m_Wrapper.m_MapFilter_TerrainVue;
        public InputAction @MarketVue => m_Wrapper.m_MapFilter_MarketVue;
        public InputActionMap Get() { return m_Wrapper.m_MapFilter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapFilterActions set) { return set.Get(); }
        public void AddCallbacks(IMapFilterActions instance)
        {
            if (instance == null || m_Wrapper.m_MapFilterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapFilterActionsCallbackInterfaces.Add(instance);
            @TerrainVue.started += instance.OnTerrainVue;
            @TerrainVue.performed += instance.OnTerrainVue;
            @TerrainVue.canceled += instance.OnTerrainVue;
            @MarketVue.started += instance.OnMarketVue;
            @MarketVue.performed += instance.OnMarketVue;
            @MarketVue.canceled += instance.OnMarketVue;
        }

        private void UnregisterCallbacks(IMapFilterActions instance)
        {
            @TerrainVue.started -= instance.OnTerrainVue;
            @TerrainVue.performed -= instance.OnTerrainVue;
            @TerrainVue.canceled -= instance.OnTerrainVue;
            @MarketVue.started -= instance.OnMarketVue;
            @MarketVue.performed -= instance.OnMarketVue;
            @MarketVue.canceled -= instance.OnMarketVue;
        }

        public void RemoveCallbacks(IMapFilterActions instance)
        {
            if (m_Wrapper.m_MapFilterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapFilterActions instance)
        {
            foreach (var item in m_Wrapper.m_MapFilterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapFilterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapFilterActions @MapFilter => new MapFilterActions(this);

    // CameraControles
    private readonly InputActionMap m_CameraControles;
    private List<ICameraControlesActions> m_CameraControlesActionsCallbackInterfaces = new List<ICameraControlesActions>();
    private readonly InputAction m_CameraControles_Move;
    private readonly InputAction m_CameraControles_Zooming;
    private readonly InputAction m_CameraControles_SpeepUp;
    public struct CameraControlesActions
    {
        private @GameInputs m_Wrapper;
        public CameraControlesActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CameraControles_Move;
        public InputAction @Zooming => m_Wrapper.m_CameraControles_Zooming;
        public InputAction @SpeepUp => m_Wrapper.m_CameraControles_SpeepUp;
        public InputActionMap Get() { return m_Wrapper.m_CameraControles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlesActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControlesActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControlesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControlesActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Zooming.started += instance.OnZooming;
            @Zooming.performed += instance.OnZooming;
            @Zooming.canceled += instance.OnZooming;
            @SpeepUp.started += instance.OnSpeepUp;
            @SpeepUp.performed += instance.OnSpeepUp;
            @SpeepUp.canceled += instance.OnSpeepUp;
        }

        private void UnregisterCallbacks(ICameraControlesActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Zooming.started -= instance.OnZooming;
            @Zooming.performed -= instance.OnZooming;
            @Zooming.canceled -= instance.OnZooming;
            @SpeepUp.started -= instance.OnSpeepUp;
            @SpeepUp.performed -= instance.OnSpeepUp;
            @SpeepUp.canceled -= instance.OnSpeepUp;
        }

        public void RemoveCallbacks(ICameraControlesActions instance)
        {
            if (m_Wrapper.m_CameraControlesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControlesActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControlesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControlesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControlesActions @CameraControles => new CameraControlesActions(this);

    // TimeControles
    private readonly InputActionMap m_TimeControles;
    private List<ITimeControlesActions> m_TimeControlesActionsCallbackInterfaces = new List<ITimeControlesActions>();
    private readonly InputAction m_TimeControles_Pause;
    private readonly InputAction m_TimeControles_Time1;
    private readonly InputAction m_TimeControles_Time2;
    private readonly InputAction m_TimeControles_Time3;
    private readonly InputAction m_TimeControles_IncreaseTime;
    public struct TimeControlesActions
    {
        private @GameInputs m_Wrapper;
        public TimeControlesActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_TimeControles_Pause;
        public InputAction @Time1 => m_Wrapper.m_TimeControles_Time1;
        public InputAction @Time2 => m_Wrapper.m_TimeControles_Time2;
        public InputAction @Time3 => m_Wrapper.m_TimeControles_Time3;
        public InputAction @IncreaseTime => m_Wrapper.m_TimeControles_IncreaseTime;
        public InputActionMap Get() { return m_Wrapper.m_TimeControles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TimeControlesActions set) { return set.Get(); }
        public void AddCallbacks(ITimeControlesActions instance)
        {
            if (instance == null || m_Wrapper.m_TimeControlesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TimeControlesActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Time1.started += instance.OnTime1;
            @Time1.performed += instance.OnTime1;
            @Time1.canceled += instance.OnTime1;
            @Time2.started += instance.OnTime2;
            @Time2.performed += instance.OnTime2;
            @Time2.canceled += instance.OnTime2;
            @Time3.started += instance.OnTime3;
            @Time3.performed += instance.OnTime3;
            @Time3.canceled += instance.OnTime3;
            @IncreaseTime.started += instance.OnIncreaseTime;
            @IncreaseTime.performed += instance.OnIncreaseTime;
            @IncreaseTime.canceled += instance.OnIncreaseTime;
        }

        private void UnregisterCallbacks(ITimeControlesActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Time1.started -= instance.OnTime1;
            @Time1.performed -= instance.OnTime1;
            @Time1.canceled -= instance.OnTime1;
            @Time2.started -= instance.OnTime2;
            @Time2.performed -= instance.OnTime2;
            @Time2.canceled -= instance.OnTime2;
            @Time3.started -= instance.OnTime3;
            @Time3.performed -= instance.OnTime3;
            @Time3.canceled -= instance.OnTime3;
            @IncreaseTime.started -= instance.OnIncreaseTime;
            @IncreaseTime.performed -= instance.OnIncreaseTime;
            @IncreaseTime.canceled -= instance.OnIncreaseTime;
        }

        public void RemoveCallbacks(ITimeControlesActions instance)
        {
            if (m_Wrapper.m_TimeControlesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITimeControlesActions instance)
        {
            foreach (var item in m_Wrapper.m_TimeControlesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TimeControlesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TimeControlesActions @TimeControles => new TimeControlesActions(this);
    public interface IInteractionModeActions
    {
        void OnReturn(InputAction.CallbackContext context);
        void OnOpenFacilityBuildingMode(InputAction.CallbackContext context);
    }
    public interface IMapFilterActions
    {
        void OnTerrainVue(InputAction.CallbackContext context);
        void OnMarketVue(InputAction.CallbackContext context);
    }
    public interface ICameraControlesActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnZooming(InputAction.CallbackContext context);
        void OnSpeepUp(InputAction.CallbackContext context);
    }
    public interface ITimeControlesActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnTime1(InputAction.CallbackContext context);
        void OnTime2(InputAction.CallbackContext context);
        void OnTime3(InputAction.CallbackContext context);
        void OnIncreaseTime(InputAction.CallbackContext context);
    }
}
