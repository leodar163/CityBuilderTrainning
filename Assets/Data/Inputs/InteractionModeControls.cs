//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Data/Inputs/InteractionModeControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InteractionModeControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InteractionModeControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InteractionModeControls"",
    ""maps"": [
        {
            ""name"": ""InteractionMode"",
            ""id"": ""34f3e68e-4ee2-4b32-8394-650dc594ccab"",
            ""actions"": [
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""f2d6ef5b-dafa-4100-9757-c5798433fc0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenFacilityBuildingMode"",
                    ""type"": ""Button"",
                    ""id"": ""c0f5105e-98a5-489e-be01-bb4a85945acc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2735d5c-82c0-4dc3-a639-6d2ede72cfcf"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbbf0f01-36c5-4678-a70f-ba1deac3c660"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fecaf1b1-30ca-41c9-b93f-a31209e236d7"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenFacilityBuildingMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InteractionMode
        m_InteractionMode = asset.FindActionMap("InteractionMode", throwIfNotFound: true);
        m_InteractionMode_Return = m_InteractionMode.FindAction("Return", throwIfNotFound: true);
        m_InteractionMode_OpenFacilityBuildingMode = m_InteractionMode.FindAction("OpenFacilityBuildingMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InteractionMode
    private readonly InputActionMap m_InteractionMode;
    private List<IInteractionModeActions> m_InteractionModeActionsCallbackInterfaces = new List<IInteractionModeActions>();
    private readonly InputAction m_InteractionMode_Return;
    private readonly InputAction m_InteractionMode_OpenFacilityBuildingMode;
    public struct InteractionModeActions
    {
        private @InteractionModeControls m_Wrapper;
        public InteractionModeActions(@InteractionModeControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Return => m_Wrapper.m_InteractionMode_Return;
        public InputAction @OpenFacilityBuildingMode => m_Wrapper.m_InteractionMode_OpenFacilityBuildingMode;
        public InputActionMap Get() { return m_Wrapper.m_InteractionMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionModeActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionModeActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionModeActionsCallbackInterfaces.Add(instance);
            @Return.started += instance.OnReturn;
            @Return.performed += instance.OnReturn;
            @Return.canceled += instance.OnReturn;
            @OpenFacilityBuildingMode.started += instance.OnOpenFacilityBuildingMode;
            @OpenFacilityBuildingMode.performed += instance.OnOpenFacilityBuildingMode;
            @OpenFacilityBuildingMode.canceled += instance.OnOpenFacilityBuildingMode;
        }

        private void UnregisterCallbacks(IInteractionModeActions instance)
        {
            @Return.started -= instance.OnReturn;
            @Return.performed -= instance.OnReturn;
            @Return.canceled -= instance.OnReturn;
            @OpenFacilityBuildingMode.started -= instance.OnOpenFacilityBuildingMode;
            @OpenFacilityBuildingMode.performed -= instance.OnOpenFacilityBuildingMode;
            @OpenFacilityBuildingMode.canceled -= instance.OnOpenFacilityBuildingMode;
        }

        public void RemoveCallbacks(IInteractionModeActions instance)
        {
            if (m_Wrapper.m_InteractionModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionModeActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionModeActions @InteractionMode => new InteractionModeActions(this);
    public interface IInteractionModeActions
    {
        void OnReturn(InputAction.CallbackContext context);
        void OnOpenFacilityBuildingMode(InputAction.CallbackContext context);
    }
}
